2023-12-17 - tree naming conventions
------------------------------------

Ebtree is being extended to support more addressing types, more data types, and
a new storage model relying on a new space-efficient tree architecture. For
this reason, we need a more detailed naming so that the type describes exactly
what is stored and how data are manipulated.

Tree architecture can be one of :
  - elastic binary tree
  - compact elastic binary tree

Node addressing models :
  - none for absolute (pointers are locations in memory)
  - "h" for huge relative (pointers are 64-bit relative to the pointer)
  - "m" for medium relative (pointers are 32-bit relative to the pointer)
  - "s" for small relative (pointers are 16-bit relative to the pointer)
  - other variants might be useful, e.g. 2x16 bits for page+offset

Unicity:
  - "u" for unique keys (each key appears at most once in the tree)
  - none for multiple keys (dups are permitted by default)

Key access mode :
  - none for direct access (key immediately follows the node)
  - "a" for address of the node (no data attached to the node)
  - "i" for indirect access (a pointer to the key follows the node). This
    pointer is then of the same type as all other pointers and follows the
    addressing model.

Key offset :
  - none for immediate storage
  - "o" for a specific offset (when the key is elsewhere in the structure)

Key type and size (for both direct/indirect) :
  - 16 / 32 / 64 / l for fixed integer key sizes (l for long)
  - "b" for fixed size memory block ("binary")
  - "s" for null-terminated string
  - none for node's address only

Key sign (for integers) :
  - "i" for signed integer
  - none for unsigned or other types

That gives :

  {eb,ceb}{,h,m,s}{u,}{,a,i}{,o}{,16,32,64,l,b,s}{i,}
      \       \     \    \    \        \           \_ signed int y/n
       \       \     \    \    \        \_ key type/size
        \       \     \    \    \_ key offset ((immediate)/offset)
         \       \     \    \_ access mode ((dir)/abs/indir)
          \       \     \_ unique y/n
           \       \_ addressing: (abs)/huge/medium/small
            \_ tree architecture

Not all combinations are necessarily valid. Only integers may have the "i"
suffix, nodes storing their own address (suffixed with "a") have no type size.
Note that there is always at least one of "a" or a type name in the name, i.e.
it's not possible to have no letter on the access mode and no letter on the key
size or type. In addition the signed extension can only appear after a valid
key size.

Maybe future extensions will come to index case insensitive strings (possibly
with an "i" suffix as well). Existing ebtree-v6 types and functions are mapped
this way :

  eb32  ---> eb32
  eb32i ---> eb32i
  eb64  ---> eb64
  eb64i ---> eb64i
  ebmb  ---> ebb
  ebst  ---> ebs
  ebpt  ---> ebi
  ebim  ---> ebib
  ebis  ---> ebis

New useful types should appear quickly :

  eba / ceba : only carry the node's address, useful for pointer-based lookups
              (eg: "show sess 0x12345678" in haproxy)

Some implementations might disappear over the long term :

  ebpt : only used as a storage type, only used as a workaround for the lack of
         ebaa. It currently carries a 32/64 bit pointer to an indirect location
         of any type (void *) thus the mapping to "ebai" (indirect node's
         address so we index the address of the storage node designated by the
         pointer).

Multiple data types may share the same nodes. For example, signed and unsigned
nodes have the same storage, only their access functions differ. The same
prefix should be used for all functions working on the same data.

Later an extension might come (locked/unlocked or shared/private use).

It is uncertain yet whether it would make sense to also split the code into
unique/non-unique trees. The nodes are the same, but it could make sense to
have different insertion functions. That's what is currently done for CEB trees.
Also experience has shown that the code calling the tree manipulation functions
always knows whether it expects unique entries or not and that from such places
it's not always easy to know how the tree was configured, so having distinct
sets of functions could often help. Unique trees do not have dup trees so that
could even save a test during lookups. The following cases have to be handled
for key occurrences :
  - unique
  - multiple
      - sorted by insertion order
      - sorted by storage address
  - defined by root configuration

Properties :
  - relative addressing mode must ensure that all nodes can correctly be
    addressed and enforce rules for this. For example, ebtree offers the
    parent pointer which means that a node may reference another node or
    the root at address zero. Forcing the use of pointers to a location
    internal to the node and having a node used as the root can be a
    solution against this. Space efficient trees will typically have their
    root at position zero and no up pointer so a NULL is unambiguous.

  - In their simplest form, CEB trees do not offer provisions for duplicates,
    though it was demonstrated that these can be built by arranging an almost
    doubly-linked list with the duplicate nodes and that preserves insertion
    ordering. However the algorithm has lots of special cases both for walking,
    inserting and deleting nodes. Regardless, CEB trees in unique mode remain
    interesting for read-mostly data where storage size matters (LRU caches
    and memory management).
